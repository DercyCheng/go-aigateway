# Multi-stage Dockerfile for React Frontend
# 针对中国内地环境优化

# ============================================
# 构建阶段
# ============================================
FROM node:18-alpine AS builder

# 设置阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装构建依赖
RUN apk add --no-cache git python3 make g++

# 设置工作目录
WORKDIR /build

# 设置npm镜像源 (中国内地优化)
RUN npm config set registry https://registry.npmmirror.com

# 复制package文件
COPY frontend/package*.json ./

# 安装依赖
RUN npm ci --only=production --no-audit --prefer-offline

# 复制源代码
COPY frontend/ .

# 构建应用
RUN npm run build

# ============================================
# 开发阶段 (包含开发工具)
# ============================================
FROM node:18-alpine AS development

# 设置阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装开发工具
RUN apk add --no-cache \
    git \
    curl \
    bash \
    vim \
    htop

# 设置工作目录
WORKDIR /app

# 设置npm镜像源
RUN npm config set registry https://registry.npmmirror.com

# 复制package文件
COPY frontend/package*.json ./

# 安装所有依赖 (包括开发依赖)
RUN npm install

# 复制源代码
COPY frontend/ .

# 暴露端口
EXPOSE 3000 5173

# 开发模式启动
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# ============================================
# Nginx 生产阶段
# ============================================
FROM nginx:1.24-alpine AS production

# 设置阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装必要工具
RUN apk add --no-cache curl

# 复制构建产物
COPY --from=builder /build/dist /usr/share/nginx/html

# 复制nginx配置
COPY deployment/nginx/nginx.conf /etc/nginx/nginx.conf
COPY deployment/nginx/default.conf /etc/nginx/conf.d/default.conf

# 创建nginx用户目录
RUN mkdir -p /var/cache/nginx/client_temp && \
    chown -R nginx:nginx /var/cache/nginx

# 暴露端口
EXPOSE 80 443

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]
