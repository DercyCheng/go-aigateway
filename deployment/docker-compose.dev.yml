# AI Gateway 开发环境 Docker Compose
# 针对中国内地环境优化
version: '3.8'

services:
  # ============================================
  # 后端服务 (Go)
  # ============================================
  go-backend:
    container_name: aigateway-backend-dev
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ../:/app
      - go-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    environment:
      - GOPROXY=${GOPROXY:-https://goproxy.cn,direct}
      - GOSUMDB=${GOSUMDB:-sum.golang.google.cn}
      - GIN_MODE=debug
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - CONSUL_ADDR=consul:8500
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Python 模型服务
  # ============================================
  python-models:
    container_name: aigateway-python-dev
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
      target: development
    ports:
      - "${PYTHON_PORT:-5000}:5000"
    volumes:
      - ../python:/app
      - python-cache:/app/.cache
      - python-models:/app/models
    environment:
      - HF_ENDPOINT=${HF_ENDPOINT:-https://hf-mirror.com}
      - HF_HOME=/app/.cache/huggingface
      - PIP_INDEX_URL=${PIP_INDEX_URL:-https://pypi.tuna.tsinghua.edu.cn/simple}
      - MODEL_TYPE=${MODEL_TYPE:-chat}
      - MODEL_SIZE=${MODEL_SIZE:-small}
      - USE_THIRD_PARTY=${USE_THIRD_PARTY:-false}
      - BAILIAN_API_KEY=${BAILIAN_API_KEY:-}
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================
  # 前端服务 (React)
  # ============================================
  react-frontend:
    container_name: aigateway-frontend-dev
    build:
      context: ..
      dockerfile: deployment/Dockerfile.react
      target: development
    ports:
      - "${FRONTEND_PORT:-3000}:5173"
    volumes:
      - ../frontend:/app
      - node-modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8080
      - NPM_CONFIG_REGISTRY=${NPM_REGISTRY:-https://registry.npmmirror.com}
    depends_on:
      - go-backend
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================
  # 数据库 (PostgreSQL)
  # ============================================
  postgres:
    container_name: aigateway-postgres-dev
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_gateway}
      - POSTGRES_USER=${POSTGRES_USER:-aigateway}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aigateway_dev_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aigateway} -d ${POSTGRES_DB:-ai_gateway}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # 缓存 (Redis)
  # ============================================
  redis:
    container_name: aigateway-redis-dev
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis-dev.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # 服务发现 (Consul)
  # ============================================
  consul:
    container_name: aigateway-consul-dev
    image: consul:1.16
    ports:
      - "${CONSUL_PORT:-8500}:8500"
    volumes:
      - consul-data:/consul/data
      - ./consul/consul-dev.json:/consul/config/consul.json
    command: consul agent -config-file=/consul/config/consul.json
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # 监控 (Prometheus)
  # ============================================
  prometheus:
    container_name: aigateway-prometheus-dev
    image: prom/prometheus:v2.47.0
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 监控面板 (Grafana)
  # ============================================
  grafana:
    container_name: aigateway-grafana-dev
    image: grafana/grafana:10.1.0
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana-dev.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - aigateway-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================
# 网络配置
# ============================================
networks:
  aigateway-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ============================================
# 数据卷配置
# ============================================
volumes:
  # 数据库
  postgres-data:
    driver: local
  redis-data:
    driver: local
  consul-data:
    driver: local

  # 监控
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

  # 缓存
  go-cache:
    driver: local
  go-build-cache:
    driver: local
  python-cache:
    driver: local
  python-models:
    driver: local
  node-modules:
    driver: local
