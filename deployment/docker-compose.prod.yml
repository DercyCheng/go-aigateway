# AI Gateway 生产环境 Docker Compose
# 针对生产环境优化
version: '3.8'

services:
  # ============================================
  # 负载均衡器 (Nginx)
  # ============================================
  nginx:
    container_name: aigateway-nginx-prod
    image: nginx:1.24-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - go-backend
      - react-frontend
    networks:
      - aigateway-frontend
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 后端服务 (Go) - 多实例
  # ============================================
  go-backend:
    container_name: aigateway-backend-prod
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    expose:
      - "8080"
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - CONSUL_ADDR=consul:8500
      - JWT_SECRET=${JWT_SECRET}
      - TLS_ENABLED=${TLS_ENABLED:-true}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - MONITORING_ENABLED=${MONITORING_ENABLED:-true}
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Python 模型服务 - 多实例
  # ============================================
  python-models:
    container_name: aigateway-python-prod
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
      target: production
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    expose:
      - "5000"
    volumes:
      - python-models:/app/models:ro
      - python-cache:/app/.cache
    environment:
      - HF_ENDPOINT=${HF_ENDPOINT:-https://hf-mirror.com}
      - HF_HOME=/app/.cache/huggingface
      - MODEL_TYPE=${MODEL_TYPE:-chat}
      - MODEL_SIZE=${MODEL_SIZE:-large}
      - USE_THIRD_PARTY=${USE_THIRD_PARTY:-true}
      - BAILIAN_API_KEY=${BAILIAN_API_KEY}
      - WORKERS=4
    networks:
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================
  # 前端服务 (React) - 静态文件
  # ============================================
  react-frontend:
    container_name: aigateway-frontend-prod
    build:
      context: ..
      dockerfile: deployment/Dockerfile.react
      target: production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    expose:
      - "80"
    networks:
      - aigateway-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 数据库 (PostgreSQL) - 主从配置
  # ============================================
  postgres:
    container_name: aigateway-postgres-prod
    image: postgres:15-alpine
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgres/postgresql-prod.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # 缓存 (Redis) - 集群配置
  # ============================================
  redis:
    container_name: aigateway-redis-prod
    image: redis:7-alpine
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    expose:
      - "6379"
    volumes:
      - redis-data:/data
      - redis-logs:/var/log/redis
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # 服务发现 (Consul) - 集群配置
  # ============================================
  consul:
    container_name: aigateway-consul-prod
    image: consul:1.16
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    expose:
      - "8500"
    volumes:
      - consul-data:/consul/data
      - consul-logs:/consul/logs
      - ./consul/consul-prod.json:/consul/config/consul.json
    command: consul agent -config-file=/consul/config/consul.json
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_TOKEN=${CONSUL_TOKEN}
    networks:
      - aigateway-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # 监控 (Prometheus)
  # ============================================
  prometheus:
    container_name: aigateway-prometheus-prod
    image: prom/prometheus:v2.47.0
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    expose:
      - "9090"
    volumes:
      - prometheus-data:/prometheus
      - prometheus-config:/etc/prometheus
      - ./prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - aigateway-backend
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 监控面板 (Grafana)
  # ============================================
  grafana:
    container_name: aigateway-grafana-prod
    image: grafana/grafana:10.1.0
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    expose:
      - "3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-logs:/var/log/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana-prod.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    depends_on:
      - prometheus
    networks:
      - monitoring
      - aigateway-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # 日志收集 (Fluentd)
  # ============================================
  fluentd:
    container_name: aigateway-fluentd-prod
    image: fluentd:v1.16-1
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - nginx-logs:/var/log/nginx:ro
      - postgres-logs:/var/log/postgresql:ro
      - redis-logs:/var/log/redis:ro
      - consul-logs:/var/log/consul:ro
      - grafana-logs:/var/log/grafana:ro
    depends_on:
      - nginx
      - postgres
      - redis
    networks:
      - monitoring
    restart: unless-stopped

# ============================================
# 网络配置
# ============================================
networks:
  aigateway-frontend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
  
  aigateway-backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
    internal: true
  
  monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/16

# ============================================
# 数据卷配置
# ============================================
volumes:
  # 数据库
  postgres-data:
    driver: local
  postgres-logs:
    driver: local
  
  # 缓存
  redis-data:
    driver: local
  redis-logs:
    driver: local
  
  # 服务发现
  consul-data:
    driver: local
  consul-logs:
    driver: local
  
  # 监控
  prometheus-data:
    driver: local
  prometheus-config:
    driver: local
  grafana-data:
    driver: local
  grafana-logs:
    driver: local
  
  # 应用缓存
  python-cache:
    driver: local
  python-models:
    driver: local
  
  # 日志
  nginx-logs:
    driver: local
