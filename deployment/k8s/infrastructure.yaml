# Kubernetes 部署配置
apiVersion: v1
kind: Namespace
metadata:
  name: ai-gateway
  labels:
    name: ai-gateway
---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-gateway-config
  namespace: ai-gateway
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  POSTGRES_HOST: "postgres-service"
  REDIS_HOST: "redis-service"
  CONSUL_ADDR: "consul-service:8500"
  SERVICE_DISCOVERY_TYPE: "kubernetes"
  MONITORING_ENABLED: "true"
  CACHE_ENABLED: "true"
  GOPROXY: "https://goproxy.cn,direct"
  GOSUMDB: "sum.golang.google.cn"
  HF_ENDPOINT: "https://hf-mirror.com"
  PIP_INDEX_URL: "https://pypi.tuna.tsinghua.edu.cn/simple"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: ai-gateway-secrets
  namespace: ai-gateway
type: Opaque
stringData:
  JWT_SECRET: "change_me_jwt_secret_for_k8s_2024"
  POSTGRES_PASSWORD: "change_me_postgres_password_2024"
  REDIS_PASSWORD: "change_me_redis_password_2024"
  BAILIAN_API_KEY: "change_me_bailian_api_key"
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ai-gateway
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "ai_gateway"
            - name: POSTGRES_USER
              value: "aigateway"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-gateway-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ai-gateway
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-gateway
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ai-gateway
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ai-gateway-secrets
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ai-gateway
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: ai-gateway
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
