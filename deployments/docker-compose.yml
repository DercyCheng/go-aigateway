version: '3.8'

services:
  # Redis 服务
  redis:
    image: redis:7-alpine
    container_name: ai-gateway-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # AI Gateway 主服务
  ai-gateway:
    build: .
    ports:
      - "8080:8080"
    environment:
      # 基础配置
      - PORT=8080
      - GIN_MODE=release
      - TARGET_API_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
      - TARGET_API_KEY=${DASHSCOPE_API_KEY}
      - GATEWAY_API_KEYS=${GATEWAY_API_KEYS}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
      - HEALTH_CHECK_ENABLED=true
      
      # 服务发现配置
      - SERVICE_DISCOVERY_ENABLED=true
      - SERVICE_DISCOVERY_TYPE=consul
      - SERVICE_DISCOVERY_ENDPOINTS=consul:8500
      - SERVICE_DISCOVERY_NAMESPACE=ai-gateway
      - SERVICE_DISCOVERY_REFRESH_RATE=30s
      
      # 协议转换配置
      - PROTOCOL_CONVERSION_ENABLED=true
      - PROTOCOL_CONVERSION_HTTPS_TO_RPC=true
      - PROTOCOL_CONVERSION_GRPC_SUPPORT=true
      - PROTOCOL_CONVERSION_PROTOCOLS=http,https,grpc
      
      # RAM 认证配置
      - RAM_AUTH_ENABLED=${RAM_AUTH_ENABLED:-false}
      - RAM_ACCESS_KEY_ID=${RAM_ACCESS_KEY_ID}
      - RAM_ACCESS_KEY_SECRET=${RAM_ACCESS_KEY_SECRET}
      - RAM_REGION=${RAM_REGION:-cn-hangzhou}
      - RAM_ROLE_ARN=${RAM_ROLE_ARN}
      - RAM_CACHE_EXPIRATION=15m
      
      # 云集成配置
      - CLOUD_INTEGRATION_ENABLED=${CLOUD_INTEGRATION_ENABLED:-false}
      - CLOUD_PROVIDER=${CLOUD_PROVIDER:-aliyun}
      - CLOUD_REGION=${CLOUD_REGION:-cn-hangzhou}
      - CLOUD_ACCESS_KEY_ID=${CLOUD_ACCESS_KEY_ID}
      - CLOUD_ACCESS_KEY_SECRET=${CLOUD_ACCESS_KEY_SECRET}
      - CLOUD_SERVICES=ecs,rds,oss
        # 数据库和缓存配置
      - REDIS_ENABLED=true
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_POOL_SIZE=10
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/aigateway?sslmode=disable
      
      # 自动扩缩容配置
      - AUTO_SCALING_ENABLED=true
      - AUTO_SCALING_MIN_REPLICAS=1
      - AUTO_SCALING_MAX_REPLICAS=5
      - AUTO_SCALING_TARGET_CPU=70.0
      - AUTO_SCALING_TARGET_QPS=1000
      - AUTO_SCALING_UP_COOLDOWN=3m
      - AUTO_SCALING_DOWN_COOLDOWN=5m
      
      # 监控配置
      - MONITORING_ENABLED=true
      - MONITORING_ALERTS_ENABLED=true
      - MONITORING_METRICS_RETENTION=24h
    depends_on:
      - redis
      - postgres
      - consul
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - ai-gateway-network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=aigateway
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aigateway"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - ai-gateway-network

  # Consul 服务发现
  consul:
    image: consul:1.15
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: >
      consul agent -server -bootstrap-expect=1 -ui -bind=0.0.0.0 
      -client=0.0.0.0 -datacenter=dc1 -data-dir=/consul/data
    volumes:
      - consul-data:/consul/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - ai-gateway-network

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - ai-gateway-network

  # Grafana 可视化
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/ai-gateway.json:ro
      - ./monitoring/grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - ai-gateway-network

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - ai-gateway-network

  # ETCD (可选的服务发现)
  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - ETCD_NAME=etcd0
      - ETCD_DATA_DIR=/etcd-data
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_INITIAL_CLUSTER=etcd0=http://etcd:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster-1
      - ETCD_INITIAL_CLUSTER_STATE=new
    volumes:
      - etcd-data:/etcd-data
    restart: unless-stopped
    networks:
      - ai-gateway-network

  # Nginx 负载均衡器
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-gateway
    restart: unless-stopped
    networks:
      - ai-gateway-network

volumes:
  redis-data:
  postgres-data:
  consul-data:
  prometheus-data:
  grafana-data:
  etcd-data:

networks:
  ai-gateway-network:
    driver: bridge