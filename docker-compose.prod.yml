# AI Gateway 生产环境 Docker Compose 配置
# 包含高可用、安全性和性能优化配置

version: '3.8'

services:
  # ==========================================
  # 基础设施服务 - 高可用配置
  # ==========================================
  
  # Redis 主从集群
  redis-master:
    image: redis:7-alpine
    container_name: aigateway-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
      - ./configs/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - aigateway-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  redis-slave:
    image: redis:7-alpine
    container_name: aigateway-redis-slave
    volumes:
      - redis_slave_data:/data
      - ./configs/redis-slave.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - redis-master
    networks:
      - aigateway-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL 主数据库
  postgres-master:
    image: postgres:15-alpine
    container_name: aigateway-postgres-master
    environment:
      POSTGRES_DB: aigateway
      POSTGRES_USER: aigateway
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aigateway -d aigateway"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - aigateway-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Consul 集群（3节点）
  consul-1:
    image: consul:1.16
    container_name: aigateway-consul-1
    ports:
      - "8500:8500"
    volumes:
      - consul_1_data:/consul/data
      - ./configs/consul-prod:/consul/config:ro
    command: >
      consul agent 
      -server 
      -bootstrap-expect=3 
      -ui 
      -bind=0.0.0.0 
      -client=0.0.0.0 
      -datacenter=dc1
      -config-dir=/consul/config
      -retry-join=consul-2
      -retry-join=consul-3
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - aigateway-network

  consul-2:
    image: consul:1.16
    container_name: aigateway-consul-2
    volumes:
      - consul_2_data:/consul/data
      - ./configs/consul-prod:/consul/config:ro
    command: >
      consul agent 
      -server 
      -bootstrap-expect=3 
      -bind=0.0.0.0 
      -client=0.0.0.0 
      -datacenter=dc1
      -config-dir=/consul/config
      -retry-join=consul-1
      -retry-join=consul-3
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - consul-1
    networks:
      - aigateway-network

  consul-3:
    image: consul:1.16
    container_name: aigateway-consul-3
    volumes:
      - consul_3_data:/consul/data
      - ./configs/consul-prod:/consul/config:ro
    command: >
      consul agent 
      -server 
      -bootstrap-expect=3 
      -bind=0.0.0.0 
      -client=0.0.0.0 
      -datacenter=dc1
      -config-dir=/consul/config
      -retry-join=consul-1
      -retry-join=consul-2
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - consul-1
    networks:
      - aigateway-network

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: aigateway-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus-rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - aigateway-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: aigateway-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana-prod:/etc/grafana/provisioning:ro
    secrets:
      - grafana_password
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - aigateway-network

  # ==========================================
  # 应用服务 - 多实例负载均衡
  # ==========================================

  # Go 后端服务 (多实例)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      # 数据库配置
      DB_HOST: postgres-master
      DB_PORT: 5432
      DB_NAME: aigateway
      DB_USER: aigateway
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      
      # Redis 配置
      REDIS_MASTER_HOST: redis-master
      REDIS_SLAVE_HOST: redis-slave
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # 服务发现配置
      SERVICE_DISCOVERY_ENABLED: "true"
      SERVICE_DISCOVERY_TYPE: consul
      CONSUL_ADDR: consul-1:8500,consul-2:8500,consul-3:8500
      
      # 监控配置
      PROMETHEUS_ENABLED: "true"
      METRICS_PORT: 9091
      
      # 生产环境配置
      GO_ENV: production
      LOG_LEVEL: info
      
      # JWT 配置
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_EXPIRY: 24h
      
      # TLS 配置
      TLS_ENABLED: "true"
      TLS_CERT_FILE: /etc/ssl/certs/server.crt
      TLS_KEY_FILE: /etc/ssl/private/server.key
      
      # 性能配置
      CACHE_ENABLED: "true"
      GZIP_ENABLED: "true"
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      
      # 第三方AI服务配置
      AI_PROVIDERS_CONFIG: /app/configs/ai-providers.yml
      
      # AI服务密钥配置（使用Docker Secrets）
      TONGYI_API_KEY_FILE: /run/secrets/tongyi_api_key
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      OPENAI_ORG_ID_FILE: /run/secrets/openai_org_id
      WENXIN_API_KEY_FILE: /run/secrets/wenxin_api_key
      WENXIN_SECRET_KEY_FILE: /run/secrets/wenxin_secret_key
      ZHIPU_API_KEY_FILE: /run/secrets/zhipu_api_key
      HUNYUAN_SECRET_ID_FILE: /run/secrets/hunyuan_secret_id
      HUNYUAN_SECRET_KEY_FILE: /run/secrets/hunyuan_secret_key
      MOONSHOT_API_KEY_FILE: /run/secrets/moonshot_api_key
    volumes:
      - ./deployment/ssl:/etc/ssl:ro
    secrets:
      - postgres_password
      - jwt_secret
      - tongyi_api_key
      - openai_api_key
      - openai_org_id
      - wenxin_api_key
      - wenxin_secret_key
      - zhipu_api_key
      - hunyuan_secret_id
      - hunyuan_secret_key
      - moonshot_api_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      consul-1:
        condition: service_healthy
    networks:
      - aigateway-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Python 模型服务 (多实例)
  python-models:
    build:
      context: .
      dockerfile: python/Dockerfile
      target: production
    environment:
      # HuggingFace 配置
      HF_ENDPOINT: https://hf-mirror.com
      HF_HOME: /app/.cache/huggingface
      
      # 模型配置
      MODEL_CACHE_DIR: /app/.cache/models
      TRANSFORMERS_CACHE: /app/.cache/transformers
      
      # 服务配置
      FLASK_ENV: production
      
      # 性能配置
      WORKERS: 4
      THREADS: 8
      WORKER_CLASS: sync
      TIMEOUT: 120
    volumes:
      - model_cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - aigateway-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # React 前端服务
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    restart: unless-stopped
    networks:
      - aigateway-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: aigateway-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - ./configs/nginx-includes:/etc/nginx/includes:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    networks:
      - aigateway-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

# ==========================================
# 网络配置
# ==========================================
networks:
  aigateway-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ==========================================
# 密钥配置
# ==========================================
secrets:
  postgres_password:
    file: ./deployment/secrets/postgres_password.txt
  jwt_secret:
    file: ./deployment/secrets/jwt_secret.txt
  grafana_password:
    file: ./deployment/secrets/grafana_password.txt
  # AI服务密钥
  tongyi_api_key:
    file: ./deployment/secrets/tongyi_api_key.txt
  openai_api_key:
    file: ./deployment/secrets/openai_api_key.txt
  openai_org_id:
    file: ./deployment/secrets/openai_org_id.txt
  wenxin_api_key:
    file: ./deployment/secrets/wenxin_api_key.txt
  wenxin_secret_key:
    file: ./deployment/secrets/wenxin_secret_key.txt
  zhipu_api_key:
    file: ./deployment/secrets/zhipu_api_key.txt
  hunyuan_secret_id:
    file: ./deployment/secrets/hunyuan_secret_id.txt
  hunyuan_secret_key:
    file: ./deployment/secrets/hunyuan_secret_key.txt
  moonshot_api_key:
    file: ./deployment/secrets/moonshot_api_key.txt

# ==========================================
# 存储卷配置
# ==========================================
volumes:
  postgres_master_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local
  consul_1_data:
    driver: local
  consul_2_data:
    driver: local
  consul_3_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  model_cache:
    driver: local
