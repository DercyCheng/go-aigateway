version: '3.8'

services:
  # Redis service for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: go-aigateway-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - aigateway_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Go API Gateway service
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-aigateway-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Basic configuration
      - PORT=8080
      - GIN_MODE=${GIN_MODE:-release}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_jwt_key_change_in_production_2024}
      - ENABLE_LOCAL_AUTH=true
      - REQUIRE_HTTPS=false
      
      # Redis configuration
      - REDIS_ENABLED=true
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - REDIS_POOL_SIZE=10
      
      # Rate limiting
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
      
      # Local model configuration
      - LOCAL_MODEL_ENABLED=${LOCAL_MODEL_ENABLED:-true}
      - LOCAL_MODEL_HOST=python-model
      - LOCAL_MODEL_PORT=5000
      - LOCAL_MODEL_TYPE=chat
      - LOCAL_MODEL_SIZE=small
      - PYTHON_PATH=python
      
      # Third-party model configuration
      - THIRD_PARTY_MODEL_ENABLED=${THIRD_PARTY_MODEL_ENABLED:-false}
      - BAILIAN_API_KEY=${BAILIAN_API_KEY:-}
      
      # Monitoring
      - MONITORING_ENABLED=true
      - MONITORING_ALERTS_ENABLED=true
      
      # Auto scaling
      - AUTO_SCALING_ENABLED=${AUTO_SCALING_ENABLED:-false}
      - AUTO_SCALING_MIN_REPLICAS=1
      - AUTO_SCALING_MAX_REPLICAS=5
      - AUTO_SCALING_TARGET_CPU=70.0
      - AUTO_SCALING_TARGET_QPS=1000
      
      # Cloud integration
      - CLOUD_INTEGRATION_ENABLED=${CLOUD_INTEGRATION_ENABLED:-false}
      - CLOUD_PROVIDER=${CLOUD_PROVIDER:-aws}
      - CLOUD_REGION=${CLOUD_REGION:-us-west-2}
      
      # Service discovery
      - SERVICE_DISCOVERY_ENABLED=false
      
      # Protocol conversion
      - PROTOCOL_CONVERSION_ENABLED=false
      
      # CORS
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:80
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    
    depends_on:
      - redis
      - python-model
    
    networks:
      - aigateway_network
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Python model service
  python-model:
    build:
      context: ./python
      dockerfile: Dockerfile
    container_name: go-aigateway-python
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - HF_ENDPOINT=${HF_ENDPOINT:-https://hf-mirror.com}
      - USE_THIRD_PARTY_MODEL=${USE_THIRD_PARTY_MODEL:-false}
      - BAILIAN_API_KEY=${BAILIAN_API_KEY:-}
      - TRANSFORMERS_CACHE=/app/.cache/transformers
      - HF_HOME=/app/.cache/huggingface
    volumes:
      - model_cache:/app/.cache
      - ./python/logs:/app/logs
    networks:
      - aigateway_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: go-aigateway-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
    depends_on:
      - gateway
    networks:
      - aigateway_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  model_cache:
    driver: local

networks:
  aigateway_network:
    driver: bridge
